import lib.apache.org.apache.commons.codec.digest.DigestUtils;

import javax.swing.*;
import javax.swing.filechooser.FileSystemView;
import java.io.*;
import java.math.BigInteger;
import java.net.Socket;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Scanner;

public class ClientThreadTwo extends Thread{
    private ClientTwo client;
    private Socket socket;
    private DataInputStream dis;
    private DataOutputStream dos;
    private FileInputStream fis;
    static int judge;

    public ClientThreadTwo(ClientTwo client, Socket socket, DataInputStream dis, DataOutputStream dos) {
        this.client = client;
        this.socket = socket;
        this.dis = dis;
        this.dos = dos;
    }

    @Override
    public void run() {
        try {
            dos.writeUTF(String.valueOf(ClientOne.delay));
            dos.writeUTF(String.valueOf(client.getPort()));
            // record from local dhrt
            ArrayList<String> keys = new ArrayList<>();
            ArrayList<String> values = new ArrayList<>();
            File filename = new File((new File("D:")).getAbsolutePath() + File.separatorChar + "dhrt2.txt"); // 要读取以上路径的input。txt文件
            InputStreamReader reader = new InputStreamReader(new FileInputStream(filename));
            BufferedReader br = new BufferedReader(reader);
            String line = "";
            while (line != null) {
                line = br.readLine();
                keys.add(line);
                line = br.readLine();
                values.add(line);
            }
            keys.remove(keys.size() - 1);
            values.remove(values.size() - 1);
            dos.write(keys.size());
            for (int i = 0; i < keys.size(); i++) {
                client.getDHRT().put(keys.get(i), values.get(i));
                dos.writeUTF(keys.get(i));
            }
            client.setGUID(dis.readUTF());

            System.out.println("The client GUID has been generated by server: " + client.getGUID());

        } catch (IOException e) {
            e.printStackTrace();
        }
        while (true) {
            try {
                System.out.println(dis.readUTF());
                Scanner scanner = new Scanner(System.in);
                String answer = scanner.nextLine();
                dos.writeUTF(answer);
                if (answer.equals("exit")) {
                    File writeName = new File((new File("D:")).getAbsolutePath() + File.separatorChar + "dhrt2.txt");
                    writeName.createNewFile();
                    BufferedWriter out = new BufferedWriter(new FileWriter(writeName));
                    for (String key : client.getDHRT().keySet()) {
                        out.write(key + "\r\n");
                        out.write(client.getDHRT().get(key) + "\r\n");
                    }
                    out.flush();
                    out.close();

                    socket.close();
                    break;
                } else if (answer.equals("upload") || judge == 1) {
                    System.out.println(dis.readUTF());
                    // select file manually
                    int result = 0;
                    String path = null;
                    JFileChooser fileChooser = new JFileChooser();
                    FileSystemView fsv = FileSystemView.getFileSystemView();
                    fileChooser.setCurrentDirectory(fsv.getHomeDirectory());
                    fileChooser.setDialogTitle("Select Your File");
                    fileChooser.setApproveButtonText("Confirm");
                    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                    result = fileChooser.showOpenDialog(fileChooser);
                    if (JFileChooser.APPROVE_OPTION == result) {
                        path = fileChooser.getSelectedFile().getPath();
                    }
                    // transfer file to md5hex
                    BigInteger bi = null;
                    byte[] buffer = new byte[8192];
                    int len = 0;
                    MessageDigest messageDigest = MessageDigest.getInstance("MD5");
                    File file = new File(path);
                    FileInputStream fis = new FileInputStream(file);
                    while ((len = fis.read(buffer)) != -1) {
                        messageDigest.update(buffer, 0, len);
                    }
                    fis.close();
                    byte[] b = messageDigest.digest();
                    bi = new BigInteger(1, b);
                    String fileMD5 = bi.toString(16);
                    // send server md5hex and path of file
                    dos.writeUTF(fileMD5);
                    System.out.println(fileMD5);
                    System.out.println(path);
                    if (!client.getDHRT().containsKey(fileMD5)) {
                        client.getDHRT().put(fileMD5, path);
                    }
                    judge = 0;
                } else if (answer.equals("receive") || judge == 2) {
                    System.out.println(dis.readUTF());
                    scanner = new Scanner(System.in);
                    answer = scanner.nextLine();
                    dos.writeUTF(answer);
                    /*if (dis.read() == 1) {
                        String path = client.getDHRT().get(answer);
                        dos.writeUTF(path);
                    }*/
                    String path = client.getDHRT().get(answer);
                    dos.writeUTF(path);
                    judge = 0;

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        try {
            this.dis.close();
            this.dos.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
